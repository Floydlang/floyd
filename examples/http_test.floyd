/*
	This program demos how to run a simple HTTP server at http://localhost:8080/info.html.
	It runs the server in one floyd process and simultaneously runs my_main in another floyd process.

	All the my_* structs can be replaced with your own types and pass any type and size of data
	around safely.
*/


let c = network_component_t(666)

container-def {
	"name": "",
	"tech": "",
	"desc": "",
	"clocks": {
		"main_clock": {
			"main": "my_main"
		},
		"http-server": {
			"server": "my_server"
		}
	}
}

struct my_doc_t { [double] audio }

struct my_main_message_t { string type }
struct my_server_message_t { string type ; my_doc_t doc }


////////////////////////////////	SERVER


struct my_server_t { int audio ; my_doc_t doc }


func string make_webpage(){
	let s = "
		<head>
			<title>Hello Floyd Server</title>
		</head>
		<body>
			<h1>Hello Floyd Server</h1>
			This document may be found <a HREF=\"https://stackoverflow.com/index.html\">here</a>
		</body>
	"
	return s
}

//	The context can be any type -- make sure it matches what you pass in execute_http_server()
func bool f(int socket_id, int context) impure {
	let read_data = read_socket(socket_id)
	if(read_data == ""){
		print("empty request\n")
	}
	else{
		let request = unpack_http_request(read_data)

		if(request.request_line == http_request_line_t( "GET", "/info.html", "HTTP/1.1" )){
			print("Serving page\n")
			let page = make_webpage()

			let r = pack_http_response(
				http_response_t (
					http_response_status_line_t ( "HTTP/1.1", "200 OK" ),
					[
						http_header_t( "Content-Type", "text/html" ),
						http_header_t( "Content-Length", to_string(size(page)) )
					],
					page
				)
			)
			write_socket(socket_id, r)
		}
		else {
			let r = pack_http_response(
				http_response_t ( http_response_status_line_t ( "HTTP/1.1", "404 OK" ), {}, "" )
			)
			write_socket(socket_id, r)
		}
	}
	return true
}

func my_server_t my_server__init() impure {
	execute_http_server(c, 8080, f, 0)
	return my_server_t(0, my_doc_t ( [0.0] ) )
}

func my_server_t my_server__msg(my_server_t state, my_main_message_t m) impure {
	assert(false)
	return state
}


////////////////////////////////	MAIN


func void sleep_busy_ms(int ms) impure {
	let end_ns = get_time_ns() + ms * 1000
	while(get_time_ns() < end_ns){
	}
}

struct my_main_t { int count ; my_doc_t doc }

func my_main_t my_main__init() impure {
	mutable x = 0
	for(i in 0 ..< 100000){
		print("main is running: ") ; print(x) ; print("\n")
		x = x + 1
		if(x == 40){
			x = 0
		}
		sleep_busy_ms(3000)
	}

	return my_main_t(1000, my_doc_t([ 0.0, 1.0, 2.0 ]))
}

func my_main_t my_main__msg(my_main_t state, my_main_message_t m) impure {
	assert(false)
	return state
}
