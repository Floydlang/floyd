



////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////		NETWORK COMPONENT
////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////		DEMO
////////////////////////////////////////////////////////////////////////////////////////////////////


func void test(network_component c) impure {
	let timeout = get_time_ns() + 3000000
	let addr = ip_address_and_port_t(ip_address2_t("123234234"), 8080)
	let r = http_request_t(http_request_line_t("GET", "/", "HTTP/1.1"), [], "")
	let a = execute_http_request(c, addr, r)
}


struct my_state_t {
}

//??? needs a custom context
func void connection_i__on_accept(int socket2){
	let read_data = read_socket_string(socket2)
	if(size(read_data) == 0){
		print("empty")
	}
	else{
		write_socket_string(socket2, "Hello!")
	}
}

func void test_server() impure {
	let c = network_component(666)
	execute_http_server(c, server_params_t(8080), "resp_process")
}


test-def("execute_http_server()", ""){
}


func void f(func string read(), func void write(string v), my_state_t context){
}

//execute_http_server(server_params_t(8080), f, my_state)


struct my_gui_state_t { int x }
struct my_gui_msg_t { string type }

struct my_server_state_t { int x }
struct my_server_msg_t { string type }


func my_gui_state_t my_gui__init() impure{
	print("my_gui__init\n")
	send("c", my_server_msg_t("hi!"))
	exit()
	return my_gui_state_t(3)
}
func my_gui_state_t my_gui__msg(my_gui_state_t s, my_gui_msg_t m) impure {
	print("my_gui__msg" + to_string(s) + to_string(m) + "\n")
	exit()
	return s
}


func my_server_state_t server_com__init(){
	print("server_com__init\n")
	return my_server_state_t(3)
}
func my_server_state_t server_com__msg(my_server_state_t s, my_server_msg_t m) impure {
	print("server_com__msg" + to_string(s) + to_string(m) + "\n")
	exit()
	return s
}

container-def {
	"name": "", "tech": "", "desc": "",
	"clocks": {
		"main": { "a": "my_gui" },
		"com-clock": { "c": "server_com" }
	}
}

print("Hello, world!\n")

